# ForCorn Discord Bot

A comprehensive Discord bot for Roblox group management, providing advanced authentication, ranking, and server moderation tools with robust API integration and user-friendly nickname standardization.

## Features

- **Roblox Authentication**: Verify Discord users with their Roblox accounts
- **Group Management**: Set up Roblox group ID and manage group ranks directly from Discord
- **Moderation Tools**: Kick, ban, and timeout members with ease
- **Anti-Raid Protection**: Advanced protection against server raids
- **Ticket System**: Support ticket management for user assistance
- **Blacklist System**: Maintain a list of blacklisted Roblox groups

## Setup Instructions

### Standard Setup
1. Clone this repository
2. Install dependencies with pip
3. Set up environment variables:
   - DISCORD_TOKEN: Your Discord bot token
   - DATABASE_URL: Database connection URL
4. Run the bot: python main.py

### Running on Replit
1. Fork this project on Replit
2. Add your DISCORD_TOKEN to the Secrets tab or .env file
3. Set up a database using one of these methods:
   - **PostgreSQL (Recommended)**: Go to Tools > Database and create a new PostgreSQL database. Environment variables will be set automatically.
   - **SQLite**: Add `DATABASE_URL=sqlite:///app.db` to your Secrets or .env file
4. Run the project - the Discord bot will automatically start
5. If the bot doesn't come online, try restarting the 'discord_bot' workflow

### Deploying on Render.com
1. Fork this repository to your GitHub account
2. Create a new Render.com account and link it to your GitHub
3. Create a new Web Service on Render:
   - Connect to your GitHub repository
   - Select the Python environment
   - Leave the build command as `pip install -r requirements.txt`
   - Set the start command to `python render_bot.py`
4. Add the required environment variables:
   - DISCORD_TOKEN: Your Discord bot token
5. Optionally create a database in Render.com:
   - Go to "PostgreSQL" in the Render dashboard
   - Create a new PostgreSQL database
   - Link it to your bot service in the environment settings
6. Deploy the service
7. The bot should come online automatically once deployment is complete

## Database Configuration

The application supports multiple database options:
1. **PostgreSQL**: For production use (recommended)
2. **SQLite**: For development or when PostgreSQL is unavailable
3. **Emergency Mode**: If no database connection is available, the app will run with limited functionality

The application includes a robust fallback system that will automatically try SQLite if PostgreSQL fails, and then emergency mode as a last resort.

## Commands

- /verify <roblox_username>: Verify Roblox account with Discord
- /setupid <group_id>: Set up Roblox group ID for the server
- /setuptoken <token>: Set up Roblox API token for ranking (DM only)
- /rank <roblox_username> [rank_name]: Rank a user in the Roblox group
- /kick <member> [reason]: Kick a member from the server
- /ban <member> [reason] [delete_days]: Ban a member from the server
- /timeout <member> <duration> [reason]: Timeout a member
- /antiraid <action>: Toggle anti-raid protection
- /ticket: Create a support ticket
- /sendticket <channel>: Send the ticket panel to a channel
- /closeticket: Close a ticket channel
- /update: Update nickname with current Roblox group rank

## Web Interface

The bot also includes a basic web interface for status monitoring accessible at port 5000.

## Troubleshooting
If the bot doesn't come online:
1. Check that your DISCORD_TOKEN is valid
2. Verify that the database configuration is correct (or use the simplified version)
3. Look at the workflow logs for any error messages

## License

This project is licensed under the MIT License - see the LICENSE file for details.
