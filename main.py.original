#!/usr/bin/env python3
"""
Main wrapper script

This script serves as a wrapper for either the web app or discord bot,
depending on which workflow called it. It bypasses any database issues.
"""

import os
import sys
import logging
import subprocess

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("main_wrapper")

def main():
    # Try to detect if we're in the discord_bot workflow
    # Method 1: Check if the environment variable is set
    is_discord_workflow = False
    if "DISCORD_BOT_WORKFLOW" in os.environ and os.environ["DISCORD_BOT_WORKFLOW"] == "true":
        is_discord_workflow = True
    
    # Method 2: Check if we're being run through a specific shell script or with specific args
    if len(sys.argv) > 1 and sys.argv[1] == '--discord-bot':
        is_discord_workflow = True
        
    # Method 3: Try to guess based on parent process name
    try:
        import psutil
        current_process = psutil.Process()
        parent = current_process.parent()
        cmdline = ' '.join(parent.cmdline()).lower()
        if 'discord' in cmdline or 'bot' in cmdline:
            is_discord_workflow = True
    except (ImportError, Exception):
        pass
    
    # Method 4: Just use a simple heuristic - if this script is called directly from command line 
    # without gunicorn, we'll run the bot
    if 'gunicorn' not in sys.argv[0].lower() and __name__ == "__main__":
        # This looks like it's being run in the discord_bot workflow
        is_discord_workflow = True
        
    # If we're in discord workflow, run the bot
    if is_discord_workflow:
        logger.info("Detected discord_bot workflow, running simple Discord bot...")
        try:
            # Run the simple Discord bot that doesn't depend on a database
            logger.info("Starting simple Discord bot...")
            # Running directly rather than using subprocess
            from simple_discord_bot import run_bot
            run_bot()
            return
        except Exception as e:
            logger.error(f"Error running Discord bot: {e}")
            import traceback
            logger.error(traceback.format_exc())
            sys.exit(1)
    
    # Otherwise, run the web application
    logger.info("Running web application...")
    try:
        # Call the original main.py as a subprocess
        port = int(os.environ.get("PORT", 5000))
        process = subprocess.run(
            ["python", "-c", f"""
import os
os.environ['DATABASE_URL'] = 'sqlite:///app.db'
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return '<h1>ForCorn Bot Web Interface</h1><p>Web interface is running, but Discord bot may need configuration.</p>'

@app.route('/status')
def status():
    return {{'status': 'ok', 'message': 'ForCorn Bot web interface running in simplified mode'}}

app.run(host='0.0.0.0', port={port}, debug=True)
"""],
            check=True
        )
        if process.returncode != 0:
            logger.error(f"Web application exited with code {process.returncode}")
            sys.exit(process.returncode)
    except Exception as e:
        logger.error(f"Error running web application: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()